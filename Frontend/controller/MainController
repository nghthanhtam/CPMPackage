{
    "type": "Ext.app.Controller",
    "reference": {
        "name": "items",
        "type": "array"
    },
    "codeClass": null,
    "userConfig": {
        "designer|userClassName": "MainController",
        "models": [
            "CsOperator",
            "CsPrint",
            "CsAnalysisDefinition",
            "CsExtendedField",
            "FdDocLink",
            "FdDocument",
            "DocumentLink",
            "MyTask",
            "CpProject",
            "CpLocation",
            "CpProjectPoint",
            "CpProjectInfra",
            "CpProjectArchi",
            "CpProjectPpt",
            "CpProjectBlk",
            "CpProjectOpd",
            "CpProjectDoc",
            "CsCodeDictionary",
            "CpMaterial",
            "CsCostCode",
            "IcItemCate",
            "MyResource",
            "MyAssignment",
            "CpWidNote",
            "CpDefinition",
            "CpContract",
            "CpPackage",
            "CpPakageItem",
            "CpPackageMtr",
            "CpPackageVdr",
            "CpPackageEvent",
            "IcItemCateNode",
            "FdReport",
            "CpPackageValue",
            "CpProgressLog",
            "CpProgressLogDetail",
            "CpPackageTerm",
            "PoBudgetDetail",
            "CpWorkItemNote",
            "MyDependency",
            "CpCpr",
            "CpPackageCate",
            "CpPriceBook",
            "CpMtrItem",
            "CpMtrItemValue",
            "PmProject"
        ],
        "requires": [
            "Ext.window.Toast",
            "tavico.DirectAPI",
            "Ext.data.identifier.Uuid",
            "Ext.layout.container.Column",
            "Ext.layout.container.Absolute",
            "Ext.layout.container.Center",
            "tavico.view.BaseReferViewController",
            "Ext.dashboard.Dashboard",
            "tavico.view.TvcPortal",
            "Ext.chart.CartesianChart",
            "Ext.chart.axis.Axis",
            "Ext.chart.axis.Category",
            "Ext.chart.axis.Numeric",
            "Ext.chart.axis.Time",
            "Ext.chart.series.Bar",
            "Ext.chart.series.Area",
            "Ext.chart.series.Line",
            "Ext.chart.series.Gauge",
            "Ext.chart.series.Pie",
            "Ext.chart.series.Polar",
            "Ext.chart.series.Radar",
            "Ext.chart.series.Scatter",
            "Ext.chart.series.Series",
            "Ext.chart.series.Cartesian",
            "Ext.chart.series.StackedCartesian",
            "Ext.chart.interactions.ItemHighlight",
            "Ext.chart.interactions.Rotate",
            "Ext.chart.interactions.PanZoom",
            "Ext.chart.interactions.CrossZoom",
            "Ext.chart.legend.SpriteLegend",
            "Ext.chart.legend.Legend",
            "Ext.state.LocalStorageProvider"
        ],
        "stores": [
            "CsExtendedFields",
            "CsAnalysisCategories",
            "DocumentLinks",
            "StoreWC"
        ],
        "views": [
            "LoginContainer",
            "MainContainer",
            "MainViewport",
            "WdInsImage",
            "BadgeButton",
            "HomePanel",
            "UserPanel",
            "ReportPanel",
            "PdfViewer",
            "TvcDateField",
            "TvcMonthField",
            "TvcPeriodField",
            "WdReport",
            "TvcCombobox",
            "WdFilterSelection",
            "WdDateSelection",
            "TvcNumberField",
            "WdPrinterList",
            "ctDocument",
            "WdDocument",
            "TestViewport",
            "ProjectGanttPanel",
            "ProjectPanel",
            "AddProjectWindow",
            "LocationPanel",
            "WdEditLocation",
            "WdDoc",
            "WdBlk",
            "WdPoint",
            "WdPpt",
            "WdArchi",
            "WdOpd",
            "WdFileUpload",
            "ItemCatPanel",
            "MaterialPanel",
            "CDYPanel",
            "EmployeePanel",
            "VendorPanel",
            "WdImport",
            "WdCsImport",
            "MyTaskForm",
            "MyTaskEditor",
            "MyAssignmentGrid",
            "GridWidNotes",
            "GridTaskHistory",
            "GridWidContract",
            "GridWidMaterialLog",
            "MyDependencyGrid",
            "GridProgressDetail",
            "GeneralPanel",
            "TvcWidget",
            "CPEPanel",
            "CCEPanel",
            "CBUPanel",
            "WdCPE",
            "WdCCE",
            "TvcCheckbox",
            "MyNumberField",
            "WdContractItem",
            "WdScdContractNode",
            "WdItemCate",
            "PackagePanel",
            "ProgressLogPanel",
            "WdCpPackageVdr",
            "WdCpPackageEvent",
            "WdCpPackageMtr",
            "WdItemList",
            "WdCpContractInst",
            "WdCpContractEvent",
            "WdPackageItems",
            "WdCpContractMtr",
            "WdScdContract",
            "PKTPanel",
            "ContractPanel",
            "WdCpPackageitem",
            "WdCpPymtRequest",
            "WdCpWorkCom",
            "WdCsCodeDictionary_type",
            "WdCate",
            "WdMtrType",
            "WdProjectDoc",
            "WdProjectMtr",
            "WdPackageMtr",
            "CostCodeNodePanel",
            "WdCostCode",
            "WdProject",
            "WdCsCodeDictionary",
            "CPRPanel",
            "PYRPanel",
            "VendorCompletePanel",
            "CompletePanel",
            "WdDiscountAlloc",
            "WdItemCateInput",
            "WdContractItemWCV",
            "WdContractItemCWC",
            "ImageViewer",
            "TvcTreePicker",
            "MyTaskFormAND",
            "PackageCatePanel",
            "ChangePwdPanel",
            "WdListCpPackageMtr",
            "CpPricebookPanel",
            "WdWorkComHistory",
            "CostSumPanel",
            "WdCWC",
            "WdVdFinance",
            "WdVdFunc",
            "WdVdProject",
            "WdCsLog",
            "WdCsContact",
            "WdLaBank",
            "WdCpContractAdv",
            "MITPanel",
            "LQRPanel",
            "WdHome"
        ]
    },
    "configAlternates": {
        "designer|userClassName": "string",
        "views": "typedarray",
        "requires": "typedarray",
        "models": "typedarray",
        "stores": "typedarray",
        "modulesStore": "object"
    },
    "name": "MyController",
    "designerId": "0d71fb91-ebef-4e5a-ad91-bb090bc13d4f",
    "cn": [
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "mainView",
                "selector": "mainviewport"
            },
            "configAlternates": {
                "ref": "string",
                "selector": "string"
            },
            "name": "mainView",
            "designerId": "d25e4475-666c-4954-9b31-758095c034ba"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "mainContainer",
                "selector": "maincontainer"
            },
            "configAlternates": {
                "ref": "string",
                "selector": "string"
            },
            "name": "mainContainer",
            "designerId": "01a0f05d-ff22-488d-8781-42c91dc7d976"
        },
        {
            "type": "fixedfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "application"
                ],
                "fn": "onLaunch",
                "implHandler": [
                    "var me\t= this,",
                    "    mv\t= me.getMainView();",
                    "",
                    "Ext.state.Manager.setProvider(new Ext.state.LocalStorageProvider());",
                    "",
                    "FrmFdWidget.getChartTheme(function(res) {",
                    "    if (res && res.success && !Ext.isEmpty(res.data))",
                    "        Ext.Array.each(res.data, function(r) {",
                    "            var themeCfg = {",
                    "                theme: r.id,",
                    "                colors: r.colors",
                    "            };",
                    "            if (!Ext.chart.theme[themeCfg.theme])",
                    "                Ext.chart.createTheme(themeCfg);",
                    "        });",
                    "});",
                    "",
                    "ConnectDB.getNowDate({}, function(res) {",
                    "    if (res && res.success) {",
                    "        me.serverDate = Ext.Date.parse(res.data,\"Y-m-dTH:i:s\");",
                    "    }",
                    "});",
                    "",
                    "var lang = me.getController('MainController').getCookie('lang') || 'vn',",
                    "    url = Ext.getResourcePath('locale/'+lang+'/tvc-locale-'+lang+'.js', null, '');",
                    "",
                    "Ext.Loader.loadScript({",
                    "    url: url,",
                    "    onLoad: function (options) {",
                    "        Ext.create('tavico.view.MainViewport');",
                    "        mv\t= me.getMainView();",
                    "        mv.getLayout().setActiveItem(0);",
                    "",
                    "        ConnectDB.getConfig({",
                    "            id:0,",
                    "            oldSessionId: me.getCookie('oldSessionId')",
                    "        }, function(res) {",
                    "            if (res && res.success && res.data.login === true) {",
                    "                me.authConfig = res.data;",
                    "                me.regRealtime(res.data);",
                    "                me.initSystem();",
                    "                mv.getLayout().setActiveItem(1);",
                    "                mv.getLayout().getActiveItem().getViewModel().setData(res.data);",
                    "                me.setCookie('oldSessionId', res.sessionId);",
                    "",
                    "            }",
                    "            mv.down('logincontainer').enableLogin(true);",
                    "        });",
                    "    }",
                    "});",
                    "",
                    "me.setDateFormat(\"FR\");"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "onLaunch",
            "designerId": "68a02dbf-8264-4998-b2aa-0049824f528d"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "wait",
                "implHandler": [
                    "this.getMainView().mask();"
                ]
            },
            "configAlternates": {
                "fn": "string",
                "implHandler": "code"
            },
            "name": "wait",
            "designerId": "69e3c36e-4b9e-412d-ba88-934f76d98de1"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "hideWait",
                "implHandler": [
                    "this.getMainView().unmask();"
                ]
            },
            "configAlternates": {
                "fn": "string",
                "implHandler": "code"
            },
            "name": "hideWait",
            "designerId": "157e4f16-5fc5-4e7a-b564-65aae0ed121a"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "configRect"
                ],
                "fn": "regRealtime",
                "implHandler": [
                    "var me = this,",
                    "    hub\t= $.connection.tvcRealtimeHub;",
                    "",
                    "hub.client.kickOutUser = function(uid) {",
                    "    if (configRect.operatorid == uid) {",
                    "        if($.connection.hub.state == 1 && hub) hub.server.signOut(configRect.company);",
                    "        $.connection.hub.stop();",
                    "",
                    "        ConnectDB.getConfig({",
                    "            id: 2",
                    "        }, function(response) {",
                    "            if (response && response.success) {",
                    "                window.onbeforeunload = null;",
                    "                window.location.href = \"\";",
                    "                //store.removeAll();",
                    "            } else {",
                    "                var msg = response ? response.message : LanguageControl.translate('There are something wrong in this process'),",
                    "                    title = response ? response.title : LanguageControl.translate('Error');",
                    "",
                    "                Ext.Msg.alert({",
                    "                    title: title,",
                    "                    msg: msg,",
                    "                    icon: Ext.Msg.ERROR",
                    "                });",
                    "            }",
                    "        });",
                    "    }",
                    "};",
                    "hub.client.billSigningComplete = function(id, serial, temp, no, einvstatus) {",
                    "    var pns = ['invlistpanel', 'invheaderpanel', 'invreplacepanel','invdiscountpanel','invpublishpanel'];",
                    "    ",
                    "    for (var i = 0 ; i < pns.length; i++) {",
                    "        var invPanel = Ext.ComponentQuery.query(pns[i]);",
                    "        if (!Ext.isEmpty(invPanel)) {",
                    "            invPanel[0].fireEvent('onSignComplete', {",
                    "                invoiceid:id,",
                    "                serial:serial,",
                    "                invoicetemplate:temp,",
                    "                invoiceno: no,",
                    "                einvstatus: einvstatus",
                    "            });",
                    "        }",
                    "    }",
                    "    ",
                    "    if (id.indexOf('ZZZ') === 0) {",
                    "        var soPanel = Ext.ComponentQuery.query('printtemppanel');",
                    "        if (!Ext.isEmpty(soPanel)) {",
                    "            soPanel[0].fireEvent('onSignTemp', {",
                    "                invoiceid:id,",
                    "                serial:serial,",
                    "                invoicetemplate:temp,",
                    "                invoiceno: no,",
                    "                einvstatus: einvstatus",
                    "            });",
                    "        }",
                    "    }",
                    "};",
                    "",
                    "",
                    "hub.client.invImpRefComplete = function(s, m, t){",
                    "    var getInvPn = Ext.ComponentQuery.query('datasyncpanel');",
                    "    if (!Ext.isEmpty(getInvPn)) {",
                    "        getInvPn[0].fireEvent('onImpRefComplete', getInvPn[0], {",
                    "            success: s,",
                    "            message: m,",
                    "            total: t",
                    "        });",
                    "    }",
                    "};",
                    "hub.client.invClientStatus = function(status){",
                    "    var mainCon = me.getMainContainer(),",
                    "        vc\t= mainCon.getController();",
                    "",
                    "    vc.setConnectInf(status);",
                    "",
                    "};",
                    "hub.client.invImpInvComplete = function(s, m, t){",
                    "    var getInvPn = Ext.ComponentQuery.query('datasyncpanel');",
                    "    if (!Ext.isEmpty(getInvPn)) {",
                    "        getInvPn[0].fireEvent('onImpInvComplete', getInvPn[0], {",
                    "            success: s,",
                    "            message: m,",
                    "            total: t",
                    "        });",
                    "    }",
                    "};",
                    "",
                    "$.connection.hub.start().done(function () {",
                    "    hub.server.signInAccount(configRect.company);",
                    "}).fail(function () { });"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "regRealtime",
            "designerId": "363eef57-0eab-4195-beb7-3cdfb6f46783"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "unregRealtime",
                "implHandler": [
                    ""
                ]
            },
            "configAlternates": {
                "fn": "string",
                "implHandler": "code"
            },
            "name": "unregRealtime",
            "designerId": "ce17d565-924d-4975-9f06-4bcde57794cd"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "name",
                    "value"
                ],
                "fn": "setCookie",
                "implHandler": [
                    "if (window.localStorage !== undefined) {",
                    "    window.localStorage.setItem(name, value);",
                    "}"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "setCookie",
            "designerId": "e896545c-92d3-42e3-8a10-6738e818c275"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "name"
                ],
                "fn": "getCookie",
                "implHandler": [
                    "if (window.localStorage !== undefined){",
                    "    return window.localStorage.getItem(name);",
                    "}"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "getCookie",
            "designerId": "e34a6b1c-62c8-4e61-9ef8-07fbf0470161"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "name"
                ],
                "fn": "clearCookie",
                "implHandler": [
                    "if (window.localStorage !== undefined) {",
                    "    window.localStorage.removeItem(name);",
                    "}"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "clearCookie",
            "designerId": "209247ac-af9a-434d-8786-a229f63623cc"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "name",
                    "args"
                ],
                "fn": "showForm",
                "implHandler": [
                    "var me\t= this,",
                    "    mainContainer = me.getMainContainer(),",
                    "    main = mainContainer.lookupReference('main'),",
                    "    aItem\t= main.getLayout().getActiveItem(),",
                    "    s\t= mainContainer.getViewModel().getStore('navItems'),",
                    "    tl\t= mainContainer.lookupReference('treelist'),",
                    "    idx = -1;",
                    "",
                    "if (!name || (aItem && aItem.getXType() === name)) {",
                    "    if (aItem && aItem.getXType() === name && args) {",
                    "        var vc = aItem.getController();",
                    "        if (Ext.isFunction(vc.processArgs)) vc.processArgs(args);",
                    "    }",
                    "    return;",
                    "}",
                    "if (aItem) main.backView = aItem.xtype;",
                    "main.removeAll();",
                    "if (!Ext.ClassManager.getByAlias('widget.'+name)) name = \"unconstruction\";",
                    "var cfg = { xtype: name };",
                    "Ext.applyIf(cfg, { args: args });",
                    "main.add(cfg);"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "showForm",
            "designerId": "37415276-0840-44b2-be89-ae7abb1e50a7"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "initSystem",
                "implHandler": [
                    "var me = this,",
                    "    sesTask\t= me.sesTask,",
                    "    cur = new Date();",
                    "",
                    "me.authConfig = Ext.apply(me.authConfig, {",
                    "    defaultValue: {",
                    "        T:\tExt.Date.format(cur, 'Y-m-d'),",
                    "        FM:\tExt.Date.format(cur, 'Y-m') + '-01',",
                    "        EM:\tExt.Date.format(Ext.Date.getLastDateOfMonth(cur), 'Y-m-d'),",
                    "        FY:\tExt.Date.format(cur, 'Y') + '-01-01',",
                    "        EY:\tExt.Date.format(cur, 'Y') + '-12-31'",
                    "    }",
                    "});",
                    "if (Ext.isEmpty(me.saleDef)) me.saleDef = {};",
                    "",
                    "if (!sesTask) {",
                    "    var runner = new Ext.util.TaskRunner();",
                    "",
                    "    me.sesTask =  sesTask = runner.newTask({",
                    "        run: function() {",
                    "            ConnectDB.checkSession({});",
                    "        },",
                    "        interval: 200000",
                    "    });",
                    "}",
                    "sesTask.start();",
                    "me.sysLoading = true;",
                    "// FrmSoDefinition.get({}, function(res) {",
                    "//     if (res && res.success && !Ext.isEmpty(res.data)) {",
                    "//         me.saleDef = res.data[0];",
                    "//     }",
                    "//     me.sysLoading = false;",
                    "//     me.fireEvent('onSysLoaded');",
                    "//     FrmSoInvHeader.getClientStatus({});",
                    "// });",
                    "FrmCpProject.getPermit({}, function(res) {",
                    "   if (res && res.success)  {",
                    "       me.projectPermit = {};",
                    "       Ext.Array.each(res.data, function(d) {",
                    "           me.projectPermit[d.project] = d.operations;",
                    "       });",
                    "   }",
                    "});",
                    "",
                    "FrmLaLedgerDefinition.get({}, function(res) {",
                    "    if (res && res.success && !Ext.isEmpty(res.data)) {",
                    "        me.ldRecord = res.data[0];",
                    "        var maxPeriod\t= me.ldRecord.maxPeriod + '',",
                    "            pC = me.ldRecord.currentperiod + '',",
                    "            pS = pC.substr(0,4) + '001',",
                    "            pE = pC.substr(0,4) + maxPeriod.substring(maxPeriod.length-3, 3);",
                    "        me.authConfig.defaultValue = Ext.apply(me.authConfig.defaultValue, {",
                    "            C:\tpC,",
                    "            E:\tpE,",
                    "            S:\tpS",
                    "        });",
                    "    }",
                    "    me.sysLoading = false;",
                    "});",
                    ""
                ]
            },
            "configAlternates": {
                "fn": "string",
                "implHandler": "code"
            },
            "name": "initSystem",
            "designerId": "c8726a8d-ee20-48b4-ba64-5bc30cef1c6b"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "value",
                    "baseVal"
                ],
                "fn": "parseMonth",
                "implHandler": [
                    "var me = this,",
                    "    reg = (/^(C|PE|S|E|Q)?([-+]{1}[0-9]*)?$/i),",
                    "    baseValue = baseVal,",
                    "    d\t= Ext.Date.clearTime(new Date()),",
                    "    cur\t= d.getFullYear()*100+d.getMonth()+1,",
                    "    arrValue;",
                    "",
                    "if (Ext.isNumber(value) && value == baseVal) return value;",
                    "",
                    "if (reg.test(value)) {",
                    "    arrValue = reg.exec(value);",
                    "    if (!arrValue[1]) {",
                    "        if (baseVal) baseValue = baseVal;",
                    "    } else if(arrValue[1].toUpperCase() == 'C') {",
                    "        baseValue = cur;",
                    "    } else if(arrValue[1].toUpperCase() == 'PE') {",
                    "        baseValue = cur;",
                    "        if (baseValue) {",
                    "            baseValue = baseValue - 100;",
                    "        }",
                    "    } else if(arrValue[1].toUpperCase() == 'S') {",
                    "        baseValue = cur;",
                    "        if (baseValue) {",
                    "            baseValue = baseValue - baseValue % 100 + 1;",
                    "        }",
                    "",
                    "    } else if(arrValue[1].toUpperCase() == 'E') {",
                    "        baseValue = cur;",
                    "        if (baseValue) {",
                    "            baseValue = baseValue - baseValue % 100 + 12;",
                    "        }",
                    "    } else if(arrValue[1].toUpperCase() == 'Q') {",
                    "        baseValue = cur;",
                    "        if (baseValue) {",
                    "            var m = baseValue % 100 - 1,",
                    "                quarterNumber = (m - m % 3) / 3 + 1;",
                    "",
                    "            baseValue = baseValue - baseValue % 100 + (quarterNumber - 1) * 3 + 1;",
                    "        }",
                    "    }",
                    "",
                    "}",
                    "",
                    "if (!Ext.isEmpty(arrValue) && baseValue) {",
                    "    var t = arrValue[2];",
                    "    if (t == '+' || t == '-') t += '1';",
                    "    if (t) {",
                    "        var y = (baseValue - baseValue % 100)/100,",
                    "            m = baseValue % 100,",
                    "            i = Ext.Number.from(t);",
                    "",
                    "        if (arrValue[1] && arrValue[1].toUpperCase() == 'Q') i = i * 3;",
                    "        m = m + i;",
                    "        if (m < 0) {",
                    "            while (m < 0) {",
                    "                m = m + 12;",
                    "                y = y - 1;",
                    "            }",
                    "        } else {",
                    "            y += (m - (m % 12))/12;",
                    "            m = m % 12;",
                    "        }",
                    "",
                    "        //if (m < 0) m = m + 12;",
                    "        value = y * 100 + m;",
                    "    } else if (arrValue[1]) {",
                    "        value = baseValue;",
                    "    }",
                    "} else if (Ext.isEmpty(arrValue) && Ext.isString(value) && value.indexOf('/') != -1) {",
                    "    arrValue = value.split('/');",
                    "    var year = d.getFullYear();",
                    "    if (arrValue.length == 2) {",
                    "        year = parseInt(arrValue[1]);",
                    "    }",
                    "",
                    "    month = parseInt(arrValue[0]);",
                    "",
                    "    value = year * 100 + month;",
                    "}",
                    "",
                    "return value;"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "parseMonth",
            "designerId": "f1d8bf11-05de-4b39-90d8-04a01454677e"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "value",
                    "baseVal"
                ],
                "fn": "parsePeriod",
                "implHandler": [
                    "var me = this,",
                    "    reg = (/^(C|PE|S|E|Q)?([-+]{1}[0-9]*)?$/i),",
                    "    ldRecord= me.ldRecord || {},",
                    "    currentperiod\t= ldRecord.currentperiod,",
                    "    maxperiod\t= ldRecord.maxperiod,",
                    "    baseValue = baseVal,",
                    "    arrValue;",
                    "",
                    "if (Ext.isNumber(value) && value == baseVal) return value;",
                    "",
                    "if (reg.test(value)) {",
                    "    arrValue = reg.exec(value);",
                    "    if (arrValue[1] === undefined) {",
                    "        if (baseVal) baseValue = baseVal;",
                    "    } else if(arrValue[1].toUpperCase() == 'C') {",
                    "        baseValue = (ldRecord ? currentperiod : null);",
                    "    } else if(arrValue[1].toUpperCase() == 'PE') {",
                    "        baseValue = (ldRecord ? currentperiod : null);",
                    "        if (baseValue) {",
                    "            baseValue = baseValue - 1000;",
                    "        }",
                    "    } else if(arrValue[1].toUpperCase() == 'S') {",
                    "        baseValue = (ldRecord ? currentperiod : null);",
                    "        if (baseValue) {",
                    "            baseValue = baseValue - baseValue % 1000 + 1;",
                    "        }",
                    "",
                    "    } else if(arrValue[1].toUpperCase() == 'E') {",
                    "        baseValue = (ldRecord ? currentperiod : null);",
                    "        if (baseValue) {",
                    "            baseValue = baseValue - baseValue % 1000 + maxperiod;",
                    "        }",
                    "    } else if(arrValue[1].toUpperCase() == 'Q') {",
                    "        baseValue = (ldRecord ? currentperiod : null);",
                    "        if (baseValue) {",
                    "            var m = baseValue % 1000 - 1,",
                    "                quarterNumber = (m - m % 3) / 3 + 1;",
                    "",
                    "            baseValue = baseValue - baseValue % 1000 + (quarterNumber - 1) * 3 + 1;",
                    "        }",
                    "    }",
                    "",
                    "}",
                    "",
                    "if (!Ext.isEmpty(arrValue) && baseValue) {",
                    "    var t = arrValue[2];",
                    "    if (t == '+' || t == '-') t += '1';",
                    "    if (t) {",
                    "        if (arrValue[1] && arrValue[1].toUpperCase() == 'Q') {",
                    "            var y = (baseValue - baseValue % 1000)/1000,",
                    "                m = baseValue % 1000,",
                    "                i = Ext.Number.from(t);",
                    "",
                    "            m = m + (i * 3);",
                    "            y += (m - (m % 12))/12;",
                    "            m = m % 12;",
                    "            if (m<0) m = m +12;",
                    "            value = y * 1000 + m;",
                    "        } else value = me.addPeriod(baseValue, t, maxperiod);",
                    "",
                    "    } else if (arrValue[1]) {",
                    "        value = baseValue;",
                    "    }",
                    "} else if (Ext.isEmpty(arrValue) && Ext.isString(value) && value.indexOf('/') != -1) {",
                    "    arrValue = value.split('/');",
                    "    var year = (new Date()).getFullYear();",
                    "    if (arrValue.length == 2) {",
                    "        year = parseInt(arrValue[1]);",
                    "    }",
                    "",
                    "    month = parseInt(arrValue[0]);",
                    "",
                    "    value = year * 1000 + month;",
                    "}",
                    "",
                    "return value;"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "parsePeriod",
            "designerId": "7fa4207f-b94c-41c1-b710-8892f8c96a4c"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "value",
                    "baseVal"
                ],
                "fn": "parseDate",
                "implHandler": [
                    "var me = this,",
                    "    reg = (/^(C|T|FM|EM|FY|EY|Q)?([-+]{1}[0-9]*)?$/i),",
                    "    toDay = Ext.Date.clearTime(new Date()),",
                    "    baseValue, arrValue;",
                    "",
                    "if (reg.test(value)) {",
                    "    arrValue = reg.exec(value);",
                    "    if (arrValue[1] === undefined) {",
                    "        if (baseVal) baseValue = baseVal;",
                    "    } else if(arrValue[1].toUpperCase() == 'C') {",
                    "        baseValue = new Date();",
                    "    } else if(arrValue[1].toUpperCase() == 'T') {",
                    "        baseValue = toDay;",
                    "    } else if (arrValue[1].toUpperCase() == 'FM') {",
                    "        baseValue = toDay;",
                    "        baseValue = new Date(baseValue.getFullYear(),baseValue.getMonth(),1);",
                    "    } else if (arrValue[1].toUpperCase() == 'EM') {",
                    "        baseValue = toDay;",
                    "        baseValue = new Date(baseValue.getFullYear(),baseValue.getMonth()+1,0);",
                    "    } else if (arrValue[1].toUpperCase() == 'FY') {",
                    "        baseValue = toDay;",
                    "        baseValue = new Date(baseValue.getFullYear(),0,1);",
                    "    } else if (arrValue[1].toUpperCase() == 'EY') {",
                    "        baseValue = toDay;",
                    "        baseValue = new Date(baseValue.getFullYear(),11,31);",
                    "    }  else if (arrValue[1].toUpperCase() == 'Q') {",
                    "        baseValue = toDay;",
                    "        var m\t= baseValue.getMonth(),",
                    "            quarterNumber = (m - m % 3) / 3 + 1;",
                    "        baseValue = new Date(baseValue.getFullYear(),(quarterNumber - 1) * 3,1);",
                    "    }",
                    "",
                    "}",
                    "",
                    "if (baseValue && !Ext.isEmpty(arrValue)) {",
                    "    var i = arrValue[2];",
                    "    if (i == '+' || i =='-') i += '1';",
                    "    if (i) {",
                    "        if (arrValue[1] && arrValue[1].toUpperCase() == 'Q') {",
                    "            value = Ext.Date.add(baseValue, Ext.Date.MONTH, Ext.Number.from(i) * 3);",
                    "        } else value = Ext.Date.add(baseValue, Ext.Date.DAY, Ext.Number.from(i));",
                    "    } else if (arrValue[1]) {",
                    "        value = baseValue;",
                    "    }",
                    "}",
                    "",
                    "return value;"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "parseDate",
            "designerId": "89745378-a9a2-455b-abf0-3e2cbeb4dada"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "api",
                    "method",
                    "name",
                    "type",
                    "args",
                    "isMulti"
                ],
                "fn": "exportFile",
                "implHandler": [
                    "var frame\t= Ext.get('iframeSubmitDownload'),",
                    "    form\t= Ext.get('formSubmitDownload');",
                    "",
                    "if (isMulti) {",
                    "    var idFrame\t= Ext.id(),",
                    "        idForm\t= Ext.id();",
                    "    frame = Ext.getBody().createChild({ tag:'iframe', cls:'x-hidden', id: idFrame });",
                    "    form = Ext.getBody().createChild({ tag:'form', action:'/DirectRouter/Index',cls:'x-hidden', method:'post', target: idFrame, id: idForm });",
                    "} else {",
                    "    if (!frame) frame = Ext.getBody().createChild({tag:'iframe', cls:'x-hidden', id:\"iframeSubmitDownload\"});",
                    "    if(!form) form = Ext.getBody().createChild({tag:'form', action:'/DirectRouter/Index',cls:'x-hidden', method:'post', target:\"iframeSubmitDownload\", id:\"formSubmitDownload\"});",
                    "}",
                    "while(form.dom.firstChild !== null){ form.dom.removeChild( form.dom.firstChild); }",
                    "",
                    "form.appendChild(Ext.getBody().createChild({tag:'input',type:'hidden',name:'extAction',value: api}));",
                    "form.appendChild(Ext.getBody().createChild({tag:'input',type:'hidden',name:'extMethod',value: method}));",
                    "form.appendChild(Ext.getBody().createChild({tag:'input',type:'hidden',name:'extDownLoad',value: true}));",
                    "form.appendChild(Ext.getBody().createChild({tag:'input',type:'hidden',name:'extUpload',value: false}));",
                    "if(Ext.isArray(args)) {",
                    "    for (var i = 0; i < args.length; i++) {",
                    "        form.appendChild(Ext.getBody().createChild({tag:'input',type:'hidden',name: args[i].name,value: args[i].value}));",
                    "    }",
                    "    //     Ext.Array.each(args, function(arg) {",
                    "    //         form.appendChild(Ext.getBody().createChild({tag:'input',type:'hidden',name: arg.name,value: arg.value}));",
                    "    //     });",
                    "} else if(Ext.isObject(args)) {",
                    "    form.appendChild(Ext.getBody().createChild({tag:'input',type:'hidden',name: args.name,value: args.value}));",
                    "}",
                    "form.appendChild(Ext.getBody().createChild({tag:'input',type:'hidden',name:'filename',value: name.replace(/ /g,\"_\")}));",
                    "form.appendChild(Ext.getBody().createChild({tag:'input',type:'hidden',name:'filetype',value: type}));",
                    "",
                    "form.dom.submit();"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "exportFile",
            "designerId": "1750429b-d4e0-439c-9ff7-b191989b1a8e"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "str"
                ],
                "fn": "locdau",
                "implHandler": [
                    "str= str.toLowerCase();",
                    "str= str.replace(/à|á|ạ|ả|ã|â|ầ|ấ|ậ|ẩ|ẫ|ă|ằ|ắ|ặ|ẳ|ẵ/g,\"a\");",
                    "str= str.replace(/è|é|ẹ|ẻ|ẽ|ê|ề|ế|ệ|ể|ễ/g,\"e\");",
                    "str= str.replace(/ì|í|ị|ỉ|ĩ/g,\"i\");",
                    "str= str.replace(/ò|ó|ọ|ỏ|õ|ô|ồ|ố|ộ|ổ|ỗ|ơ|ờ|ớ|ợ|ở|ỡ/g,\"o\");",
                    "str= str.replace(/ù|ú|ụ|ủ|ũ|ư|ừ|ứ|ự|ử|ữ/g,\"u\");",
                    "str= str.replace(/ỳ|ý|ỵ|ỷ|ỹ/g,\"y\");",
                    "str= str.replace(/đ/g,\"d\");",
                    "//str= str.replace(/!|@|%|\\^|\\*|\\(|\\)|\\+|\\=|\\<|\\>|\\?|\\/|,|\\.|\\:|\\;|\\'| |\\\"|\\&|\\#|\\[|\\]|~|$|_/g,\"-\");",
                    "/* tìm và thay thế các kí tự đặc biệt trong chuỗi sang kí tự - */",
                    "str= str.replace(/-+-/g,\"-\"); //thay thế 2- thành 1-",
                    "str= str.replace(/^\\-+|\\-+$/g,\"\");",
                    "str= str.replace(/ /g,\"_\");",
                    "//cắt bỏ ký tự - ở đầu và cuối chuỗi",
                    "return str;"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "locdau",
            "designerId": "3eb73f6e-aaeb-48ad-8fdc-f516c2909d59"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "value"
                ],
                "fn": "formatMonth",
                "implHandler": [
                    "if (!value) return '';",
                    "if (Ext.isNumber(value)) {",
                    "    if (value === 0) return undefined;",
                    "    var month = value % 100,",
                    "        year = (value - month)/100;",
                    "    value = '' + FormatNumberLength(month,2) + '/' + year +'';",
                    "} else {",
                    "    var tmp = parseInt(value);",
                    "    if (Ext.isNumber(tmp)) {",
                    "        var month = tmp % 100,",
                    "            year = (tmp - month)/100;",
                    "        value = '' + FormatNumberLength(month,2) + '/' + year +'';",
                    "    }",
                    "}",
                    "function FormatNumberLength(num, length) {",
                    "    var r = \"\" + num;",
                    "    while (r.length < length) {",
                    "        r = \"0\" + r;",
                    "    }",
                    "    return r;",
                    "}",
                    "return value;"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "formatMonth",
            "designerId": "0d953d9c-335a-4e67-8247-0ca8107433c5"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "value"
                ],
                "fn": "formatPeriod",
                "implHandler": [
                    "if (!value) return '';",
                    "if (Ext.isNumber(value)) {",
                    "    if (value === 0) return undefined;",
                    "    var month = value % 1000,",
                    "        year = (value - month)/1000;",
                    "    value = '' + FormatNumberLength(month,3) + '/' + year +'';",
                    "} else {",
                    "    var tmp = parseInt(value);",
                    "    if (Ext.isNumber(tmp)) {",
                    "        var month = tmp % 1000,",
                    "            year = (tmp - month)/1000;",
                    "        value = '' + FormatNumberLength(month,3) + '/' + year +'';",
                    "    }",
                    "}",
                    "function FormatNumberLength(num, length) {",
                    "    var r = \"\" + num;",
                    "    while (r.length < length) {",
                    "        r = \"0\" + r;",
                    "    }",
                    "    return r;",
                    "}",
                    "return value;"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "formatPeriod",
            "designerId": "11d755f1-05d9-44fb-8140-f85de56c6106"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "analRecord"
                ],
                "fn": "getMappingAnalysisData",
                "implHandler": [
                    "var me\t= this,",
                    "    shorthead\t= analRecord.get('shorthead'),",
                    "    idField\t\t= analRecord.get('valuefield'),",
                    "    textField\t= analRecord.get('displayfield') ,",
                    "    dataType\t= analRecord.get('datatype'),",
                    "    datasource\t= analRecord.get('datasource'),",
                    "    validType\t= analRecord.get('validationmethod'),",
                    "    amendable\t= analRecord.get('amendable') == 'Y' ? true: false,",
                    "    MODULES = me.MODULES || {},",
                    "    shortcmd\t= datasource,",
                    "    nonValidated= true,",
                    "    allowBlank\t= true,",
                    "    grid\t\t= 'GridLookup',",
                    "    store, storeData, rec, syncStore;",
                    "",
                    "if (validType == \"0\") {",
                    "    allowBlank = false;",
                    "} else if (validType == \"1\") {",
                    "    allowBlank = false;",
                    "    nonValidated = false;",
                    "} else if (validType == \"3\") {",
                    "    nonValidated = false;",
                    "}",
                    "",
                    "if (dataType == 'S') {",
                    "    if (datasource) {",
                    "//         grid = 'GridCsCodeDictionary';",
                    "//         store = Ext.getStore('CsCodeDictionaries' + datasource);",
                    "//         syncStore = 'CsCodeDictionaries';",
                    "//         if(!store) {",
                    "//             store = Ext.create('tavico.store.CsCodeDictionaries', { storeId: 'CsCodeDictionaries' + datasource });",
                    "//             store.getProxy().setExtraParam('category', datasource);",
                    "//             store.getProxy().setExtraParam('status', \"W\");",
                    "//         }",
                    "        shortcmd = 'CDY';",
                    "        if (!idField) idField='code';",
                    "        if (!textField) textField='name';",
                    "    }",
                    "",
                    "} else if (dataType == 'C') {",
                    "//     var xclass  = '';",
                    "    store = datasource;",
                    "} else if (dataType == 'D') {",
                    "}",
                    "",
                    "return { datatype: dataType, syncStore: syncStore, shorthead: shorthead,datasource: datasource, idField: idField, textField: textField, store: store, grid: grid, nonValidated: nonValidated, allowBlank: allowBlank,amendable:amendable, shortcmd: shortcmd };"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "getMappingAnalysisData",
            "designerId": "e64751ab-fc9c-4f50-bf56-d608655c119d"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "frm",
                    "category",
                    "callback",
                    "term"
                ],
                "fn": "mappingAnalysis",
                "implHandler": [
                    "var me = this,",
                    "    analStore = Ext.getStore('CsAnalysisCategories'+category),",
                    "    cate = category.toUpperCase(),",
                    "    fields, recData;",
                    "",
                    "if (!me.modulesStore) {",
                    "    me.modulesStore = {",
                    "        NAD: {",
                    "            remoteSort: true,",
                    "            pageSize: 10,",
                    "            model: 'tavico.model.CsNameAddress',",
                    "            proxy: {",
                    "                type: 'direct',",
                    "                api: {",
                    "                    read: 'FrmCsNameAddress.getCombo'",
                    "                },",
                    "                extraParams: {",
                    "                    type: 'S'",
                    "                },",
                    "                filterParam: 'filters',",
                    "                reader: {",
                    "                    type: 'json',",
                    "                    rootProperty: 'data',",
                    "                    totalProperty: 'totalCount'",
                    "                }",
                    "            }",
                    "        },",
                    "        PPJ: {",
                    "            remoteSort: true,",
                    "            pageSize: 10,",
                    "            model: 'tavico.model.PmProject',",
                    "            proxy: {",
                    "                type: 'direct',",
                    "                api: {",
                    "                    read: 'FrmPmProject.getCombo'",
                    "                },",
                    "                extraParams: {",
                    "                    status: 'W'",
                    "                },",
                    "                filterParam: 'filters',",
                    "                reader: {",
                    "                    type: 'json',",
                    "                    rootProperty: 'data',",
                    "                    totalProperty: 'totalCount'",
                    "                }",
                    "            }",
                    "        }",
                    "    };",
                    "}",
                    "",
                    "",
                    "if (!me.anaylysysMappingCategory) me.anaylysysMappingCategory = {};",
                    "if (!me.anaylysysMappingCategory[cate]) me.anaylysysMappingCategory[cate] = {};",
                    "",
                    "var runMapping = function (analStore, callback) {",
                    "    var analRecord = null,",
                    "        fields;",
                    "",
                    "    var mapField = function(fields, analRecord, analStore, idx) {",
                    "        var indexAnal = cate + idx;",
                    "        if (fields) {",
                    "            if (!me.anaylysysMappingCategory[cate][indexAnal]) {",
                    "                analRecord = analStore.findRecord('category', cate + idx);",
                    "                if (analRecord) {",
                    "                    recData = me.getMappingAnalysisData(analRecord);",
                    "                    me.anaylysysMappingCategory[cate][indexAnal] = recData;",
                    "",
                    "                }",
                    "            }",
                    "",
                    "            recData = me.anaylysysMappingCategory[cate][indexAnal];",
                    "            if (recData) {",
                    "                Ext.Array.each(fields, function(field) {",
                    "                    var store = null,",
                    "                        obj\t= recData || {};",
                    "                    field.setFieldLabel(obj.shorthead);",
                    "",
                    "                    if (recData.datatype === 'S') {",
                    "                        if(recData.datasource === '') {",
                    "                            field.setHideTrigger(true);",
                    "                        } else {",
                    "                            store = Ext.getStore('CsCodeDictionaries' + obj.datasource);",
                    "",
                    "                            if (!store) {",
                    "                                store = Ext.create('Ext.data.Store', {",
                    "                                    remoteSort: true,",
                    "                                    pageSize: 10,",
                    "                                    storeId: 'CsCodeDictionaries' + obj.datasource,",
                    "                                    model: 'tavico.model.CsCodeDictionary',",
                    "                                    proxy: {",
                    "                                        type: 'direct',",
                    "                                        api: {",
                    "                                            read: 'FrmCsCodeDictionary.getCombo'",
                    "                                        },",
                    "                                        extraParams: {",
                    "                                            status: 'W',",
                    "                                            category: obj.datasource",
                    "                                        },",
                    "                                        reader: {",
                    "                                            type: 'json',",
                    "                                            rootProperty: 'data',",
                    "                                            totalProperty: 'totalCount'",
                    "                                        }",
                    "                                    }",
                    "                                });",
                    "                            }",
                    "",
                    "                            field.autoLoadOnValue = true;",
                    "                            field.bindStore(store);",
                    "                            field.valueField = 'code';",
                    "                            field.setDisplayField('name');",
                    "                            field.setDisplayTpl(field.applyDisplayTpl());",
                    "",
                    "",
                    "                            field.minChars = 2;",
                    "",
                    "                            field.setVisible(true);",
                    "",
                    "                        }",
                    "                    } else if (recData.datatype === 'C') {",
                    "                        var modulesStore = me.modulesStore;",
                    "",
                    "                        //                         if (!store) {",
                    "                        //                             store = Ext.create('tavico.store.CsCodeDictionaries', { storeId: 'CsCodeDictionaries' + obj.datasource });",
                    "                        //                             store.getProxy().setExtraParam('category', obj.datasource);",
                    "                        //                             store.getProxy().setExtraParam('status', 'W');",
                    "                        //                             store.getProxy().setApi({",
                    "                        //                                 read: 'FrmCsCodeDictionary.getCombo'",
                    "                        //                             });",
                    "                        //                         }",
                    "",
                    "                        field.autoLoadOnValue = true;",
                    "                        //field.bindStore(store);",
                    "",
                    "//                         field.setFieldLabel(recData.shorthead);",
                    "                        field.valueField = recData.idField;",
                    "                        field.setDisplayField(recData.textField);",
                    "                        field.setDisplayTpl(field.applyDisplayTpl());",
                    "                        if (modulesStore[recData.store]) {",
                    "                            field.bindStore(Ext.create('Ext.data.Store', modulesStore[recData.store]));",
                    "                        }",
                    "                        field.minChars = 2;",
                    "",
                    "                        field.show();",
                    "",
                    "                    } else {",
                    "                        field.allowBlank = true;",
                    "                        field.maxLength = 25;",
                    "                        field.setVisible(true);",
                    "                        field.setHideTrigger(true);",
                    "                    }",
                    "                });",
                    "            } else {",
                    "                Ext.Array.each(fields, function(field) {",
                    "                    field.destroy();",
                    "                });",
                    "            }",
                    "",
                    "",
                    "        }",
                    "",
                    "    };",
                    "    var mapColumn = function (columns, analRecord, analStore, idx) {",
                    "        var indexAnal = cate + idx;",
                    "        if (columns) {",
                    "            if (!me.anaylysysMappingCategory[cate][indexAnal]) {",
                    "                analRecord = analStore.findRecord('category', cate + idx);",
                    "                if (analRecord) {",
                    "                    recData = me.getMappingAnalysisData(analRecord);",
                    "                    me.anaylysysMappingCategory[cate][indexAnal] = recData;",
                    "",
                    "                }",
                    "            }",
                    "",
                    "            recData = me.anaylysysMappingCategory[cate][indexAnal];",
                    "            if (recData) {",
                    "                Ext.Array.each(columns, function(column) {",
                    "                    column.setText(recData.shorthead);",
                    "                    column.amendable = recData.amendable;",
                    "                    if (column.getEditor) {",
                    "                        var field = column.getEditor();",
                    "",
                    "                        if (field && field.xtype == 'lookupfield') {",
                    "                            field.nonValidated = recData.nonValidated;",
                    "                            field.allowBlank = recData.allowBlank;",
                    "                            field.reconfigure(recData.store,recData.grid,recData.idField,recData.textField, recData.shortcmd);",
                    "                        }",
                    "                    } else if (Ext.isObject(column.editor)) {",
                    "                        column.editor.nonValidated = recData.nonValidated;",
                    "                        column.editor.allowBlank = recData.allowBlank;",
                    "                        column.editor.store = recData.store;",
                    "                        column.editor.grid = recData.grid;",
                    "                        column.editor.shortcmd = recData.shortcmd;",
                    "                        column.editor.valueField = column.editor.displayField = recData.idField;",
                    "                        column.editor.descField = recData.textField;",
                    "                    }",
                    "                });",
                    "            }",
                    "        }",
                    "",
                    "",
                    "    };",
                    "",
                    "    Ext.suspendLayouts();",
                    "    for (var i=0; i<10; i++) {",
                    "",
                    "        analRecord = null;",
                    "        if (term) {",
                    "            fields = frm.query('textfield[name='+ Ext.String.format(term, category+i) + ']');",
                    "        } else fields = frm.query('textfield[name=anal_'+category+i+']');",
                    "",
                    "        mapField(fields, analRecord, analStore, i);",
                    "",
                    "        if (term) {",
                    "            columns = frm.query('gridcolumn[itemId='+ Ext.String.format(term, category+i) + ']');",
                    "        } else columns = frm.query('gridcolumn[itemId=gcanal_'+category+i+']');",
                    "",
                    "        mapColumn(columns, analRecord, analStore, i);",
                    "    }",
                    "    Ext.resumeLayouts(true);",
                    "    if (callback) { callback.call(this,frm); }",
                    "};",
                    "",
                    "if (!analStore) {",
                    "    analStore = Ext.create('Ext.data.Store', {",
                    "        remoteSort: true,",
                    "        storeId: 'CsAnalysisCategories'+category,",
                    "        model: 'tavico.model.CsAnalysisDefinition',",
                    "        proxy: {",
                    "            type: 'direct',",
                    "            api: {",
                    "                read: 'FrmCsAnalysisDefinition.get'",
                    "            },",
                    "            extraParams: {",
                    "                prefixCate: cate",
                    "            },",
                    "            reader: {",
                    "                type: 'json',",
                    "                rootProperty: 'data',",
                    "                totalProperty: 'totalCount'",
                    "            }",
                    "        }",
                    "",
                    "",
                    "    });",
                    "    //     Ext.apply(analStore.getProxy().extraParams, { prefixCate: cate });",
                    "",
                    "    analStore.load({",
                    "        params: { limit: 0 },",
                    "        callback: function(records,operation,success) {",
                    "            if (success) {",
                    "                runMapping(analStore, callback);",
                    "            } else {",
                    "                if (operation.exception && operation.error !== undefined) {",
                    "                    Ext.Msg.alert(LanguageControl.translate('Error'), LanguageControl.translate(operation.error));",
                    "                } else if (success === false) {",
                    "                    var rawData = operation.getRequest().getProxy().getReader().rawData;",
                    "                    if (rawData.title && rawData.message) {",
                    "                        Ext.Msg.alert(rawData.title, rawData.message);",
                    "                    } else {",
                    "                        Ext.Msg.alert(LanguageControl.translate('Error'), LanguageControl.translate('Unsuccessful operation. Please contact HelpDesk. TAC: YELLOW!'));",
                    "                    }",
                    "                }",
                    "            }",
                    "",
                    "        },",
                    "        scope: me",
                    "    });",
                    "} else runMapping(analStore, callback);"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "mappingAnalysis",
            "designerId": "fca944ca-8b7f-4cbb-a8cc-209905accfa4"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "frm",
                    "formid",
                    "callback"
                ],
                "fn": "mappingExtendedField",
                "implHandler": [
                    "var me = this,",
                    "    extStore = Ext.getStore('CsExtendedFields'+formid),",
                    "    fields, columns;",
                    "",
                    "var runMapping = function (extStore, callback) {",
                    "    var mapField = function(fields, extRecord) {",
                    "        if (fields) {",
                    "            if (extRecord) {",
                    "                Ext.Array.each(fields, function(field) {",
                    "                    field.setFieldLabel(extRecord.get('shortheading'));",
                    "                    if(!field.forceHide) field.setVisible(true);",
                    "                });",
                    "            } else {",
                    "                Ext.Array.each(fields, function(field) {",
                    "                    field.destroy();",
                    "                });",
                    "            }",
                    "        }",
                    "",
                    "    };",
                    "",
                    "    Ext.suspendLayouts();",
                    "    for (var i = 1; i <= 10 ; i++) {",
                    "        var de\t= 'extdescription'+i,",
                    "            da\t= 'extdate'+i,",
                    "            re\t= 'extreference'+i,",
                    "            nu\t= 'extnumber'+i,",
                    "            cts\t= [],",
                    "            flds, cols, extRec;",
                    "",
                    "        extRec =  extStore.findRecord('fieldname', de);",
                    "        flds = frm.query('field[name='+de+']');",
                    "        if (!Ext.isEmpty(flds)) mapField(flds, extRec);",
                    "",
                    "        extRec =  extStore.findRecord('fieldname', da);",
                    "        flds = frm.query('field[name='+da+']');",
                    "        if (!Ext.isEmpty(flds)) mapField(flds, extRec);",
                    "",
                    "        extRec =  extStore.findRecord('fieldname', re);",
                    "        flds = frm.query('field[name='+re+']');",
                    "        if (!Ext.isEmpty(flds)) mapField(flds, extRec);",
                    "",
                    "",
                    "        extRec =  extStore.findRecord('fieldname', nu);",
                    "        flds = frm.query('field[name='+nu+']');",
                    "        if (!Ext.isEmpty(flds)) mapField(flds, extRec);",
                    "",
                    "    }",
                    "    Ext.resumeLayouts(true);",
                    "",
                    "    if (callback) { callback.call(this,frm); }",
                    "};",
                    "",
                    "if (!extStore) {",
                    "    extStore = Ext.create('Ext.data.Store', {",
                    "        storeId: 'CsExtendedFields'+formid,",
                    "        model: 'tavico.model.CsExtendedField',",
                    "        proxy: {",
                    "            type: 'direct',",
                    "            api: {",
                    "                read: 'FrmCsExtendedField.get'",
                    "            },",
                    "            extraParams: {",
                    "                formid: formid",
                    "            },",
                    "            reader: {",
                    "                type: 'json',",
                    "                rootProperty: 'data',",
                    "                totalProperty: 'totalCount'",
                    "            }",
                    "        }",
                    "    });",
                    "",
                    "    extStore.load({",
                    "        params: { limit: 0 },",
                    "        callback: function(records,operation,success) {",
                    "            if (success) {",
                    "                runMapping(extStore, callback);",
                    "            } else {",
                    "                if (operation.exception && operation.error !== undefined) {",
                    "                    Ext.Msg.alert(LanguageControl.translate('Error'), LanguageControl.translate(operation.error));",
                    "                } else if (success === false) {",
                    "                    var rawData = operation.getRequest().getProxy().getReader().rawData;",
                    "                    if (rawData.title && rawData.message) {",
                    "                        Ext.Msg.alert(rawData.title,rawData.message);",
                    "                    } else {",
                    "                        Ext.Msg.alert(LanguageControl.translate('Error'), LanguageControl.translate('Unsuccessful operation. Please contact HelpDesk. TAC: YELLOW!'));",
                    "                    }",
                    "                }",
                    "            }",
                    "",
                    "        },",
                    "        scope: me",
                    "    });",
                    "} else runMapping(extStore, callback);"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "mappingExtendedField",
            "designerId": "2cdbc80a-0c62-477a-9347-21896e92796b"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "cfg",
                    "callback",
                    "scope"
                ],
                "fn": "initCurrencyRate",
                "implHandler": [
                    "var me\t= scope ? scope : this,",
                    "    cRate\t= me.cachedCurrencyRate,",
                    "    curCode,transdate, accountcode, curCodeTo, period;",
                    "",
                    "if (cfg.isModel) {",
                    "    curCode = cfg.get('currencycode');",
                    "    curCodeTo = cfg.get('currencycodeto');",
                    "    transdate = cfg.get('transdate');",
                    "    period = cfg.get('period');",
                    "    accountcode = cfg.get('accountcode');",
                    "} else if (Ext.isObject(cfg)) {",
                    "    curCode = cfg.currencycode;",
                    "    curCodeTo = cfg.currencycodeto;",
                    "    transdate = cfg.transdate;",
                    "    period = cfg.period;",
                    "    accountcode = cfg.accountcode;",
                    "} else if (Ext.isString(cfg)) {",
                    "    curCode = cfg;",
                    "}",
                    "",
                    "if (!cRate) {",
                    "    me.cachedCurrencyRate = cRate = {};",
                    "}",
                    "",
                    "if (cRate.currencycode !== curCode ||",
                    "    cRate.transdate !== transdate ||",
                    "    cRate.period !== period ||",
                    "    cRate.accountcode !== accountcode ||",
                    "    cRate.currencycodeto !== curCodeTo) {",
                    "",
                    "    cRate.currencycode = curCode;",
                    "    cRate.currencycodeto = curCodeTo;",
                    "",
                    "    cRate.transdate = transdate;",
                    "    cRate.period = period;",
                    "    cRate.accountcode = accountcode;",
                    "    if (!cRate.currencycode) {",
                    "        cRate.rate = 0;",
                    "        cRate.op = '*';",
                    "        cRate.toleranceprecent = 0;",
                    "        cRate.rateConvert = Ext.Function.bind(function(value, rate) {",
                    "            return 0;",
                    "        }, cRate);",
                    "",
                    "        cRate.rateSerialize = Ext.Function.bind(function(value, rate) {",
                    "            return 0;",
                    "        }, cRate);",
                    "        if(Ext.isFunction(callback)) callback.call(this, cRate);",
                    "    } else if (cRate.currencycode == cRate.currencycodeto) {",
                    "        cRate.rate = 1;",
                    "        cRate.op = '*';",
                    "        cRate.toleranceprecent = 0;",
                    "        cRate.rateConvert = Ext.Function.bind(function(value, rate) {",
                    "            return value;",
                    "        }, cRate);",
                    "        cRate.rateSerialize = Ext.Function.bind(function(value, rate) {",
                    "            return value;",
                    "        }, cRate);",
                    "        if(Ext.isFunction(callback)) callback.call(this, cRate);",
                    "    } else {",
                    "        FrmCsCurrency.getCurrencyRate(cRate, function(response, e) {",
                    "            if (!response) {",
                    "                Ext.Msg.alert(LanguageControl.translate('Failure'), LanguageControl.translate('There are some thing wrong in this project'));",
                    "            } else {",
                    "                if(response.success && response.data && response.data.length >0) {",
                    "                    cRate.rate = response.data[0].rate;",
                    "                    cRate.op = response.data[0].op;",
                    "                    cRate.toleranceprecent = response.data[0].toleranceprecent;",
                    "                    cRate.dailyrate = response.data[0].dailyrate;",
                    "                    cRate.daylimit =  response.data[0].daylimit;",
                    "                    cRate.decimalplace =  response.data[0].decimalplace;",
                    "                    cRate.reallossaccount =  response.data[0].reallossaccount;",
                    "                    cRate.realgainaccount =  response.data[0].realgainaccount;",
                    "",
                    "                }",
                    "                cRate.rateConvert = Ext.Function.bind(function(value, rate) {",
                    "                    var r\t= rate !== undefined ? rate : this.rate,",
                    "                        op\t= this.op;",
                    "",
                    "                    if (!op || op==\"*\") return value * r;",
                    "                    if (r === 0) return 0;",
                    "                    return value / r;",
                    "                }, cRate);",
                    "",
                    "                cRate.rateSerialize = Ext.Function.bind(function(value, rate) {",
                    "                    var r\t= rate !== undefined ? rate : this.rate,",
                    "                        op\t= this.op;",
                    "",
                    "                    if (!op || op==\"*\") {",
                    "                        if (r === 0) return 0;",
                    "                        return value / r;",
                    "                    }",
                    "                    return value * r;",
                    "                }, cRate);",
                    "",
                    "                if (Ext.isFunction(callback)) callback.call(this, cRate);",
                    "            }",
                    "        });",
                    "    }",
                    "",
                    "} else {",
                    "    if (Ext.isFunction(callback)) callback.call(this, cRate);",
                    "}"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "initCurrencyRate",
            "designerId": "0d92700e-9294-472c-bf62-fb0b7b094d79"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "batch",
                    "eOpts"
                ],
                "fn": "syncCallback",
                "implHandler": [
                    "var title\t= LanguageControl.translate('Error'),",
                    "    msg\t\t= LanguageControl.translate('There are something wrong in this process'),",
                    "    anyErr\t= false;",
                    "",
                    "if (batch.hasException() === true) {",
                    "    anyErr = true;",
                    "    if(batch.exceptions[0].error) {",
                    "        msg = batch.exceptions[0].error;",
                    "    } else {",
                    "        var rawData = batch.exceptions[0].getResponse().result;",
                    "        if(rawData.title && rawData.message) {",
                    "            title = rawData.title;",
                    "            msg = rawData.message;",
                    "        }",
                    "    }",
                    "",
                    "} else if(batch.operations.length > 0) {",
                    "    var operation = batch.operations[0];",
                    "    if(operation.getResponse() && operation.getResponse().result) {",
                    "        var result = operation.getResponse().result;",
                    "        if(result.title && result.message) {",
                    "            title = result.title;",
                    "            msg = result.message;",
                    "        } else {",
                    "            title = LanguageControl.translate('Warning');",
                    "            msg = LanguageControl.translate('Panic operation. Please contact HelpDesk. TAC: YELLOW!');",
                    "            anyErr = true;",
                    "        }",
                    "",
                    "    } else if(operation.getResultSet().count === 0) {",
                    "        msg = LanguageControl.translate('Data connection got unexpected error. Please call HelpDesk for assitant. We recommend to re-sync data now!');",
                    "        anyErr = true;",
                    "    } else if(operation.getResultSet().title && operation.getResultSet().message) {",
                    "        title = operation.getResultSet().title;",
                    "        msg = operation.getResultSet().message;",
                    "",
                    "    } else {",
                    "        anyErr = true;",
                    "    }",
                    "} else {",
                    "    anyErr = true;",
                    "}",
                    "",
                    "if (anyErr) {",
                    "    Ext.Msg.alert({",
                    "        title: title,",
                    "        msg: msg,",
                    "        icon: Ext.Msg.ERROR,",
                    "        buttons: Ext.Msg.OK",
                    "    });",
                    "} else Ext.toast(title, msg);"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "syncCallback",
            "designerId": "07f5cc2b-8905-4042-90c6-24ddf5dd17ec"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "record",
                    "opeartion"
                ],
                "fn": "saveCallback",
                "implHandler": [
                    "var title\t= LanguageControl.translate('Error'),",
                    "    msg\t\t= LanguageControl.translate('There are something wrong in this process'),",
                    "    anyErr\t= false,",
                    "    result;",
                    "",
                    "if (opeartion.hasException() === true) {",
                    "    result = opeartion.getResponse().result;",
                    "    title = result.title;",
                    "    msg = result.message;",
                    "    anyErr = true;",
                    "} else if(batch.operations.length > 0) {",
                    "    var operation = batch.operations[0];",
                    "    if(operation.getResponse() && operation.getResponse().result) {",
                    "        var result = operation.getResponse().result;",
                    "        if(result.title && result.message) {",
                    "            title = result.title;",
                    "            msg = result.message;",
                    "        } else {",
                    "            title = LanguageControl.translate('Warning');",
                    "            msg = LanguageControl.translate('Panic operation. Please contact HelpDesk. TAC: YELLOW!');",
                    "            anyErr = true;",
                    "        }",
                    "",
                    "    } else if(operation.getResultSet().count === 0) {",
                    "        msg = LanguageControl.translate('Data connection got unexpected error. Please call HelpDesk for assitant. We recommend to re-sync data now!');",
                    "        anyErr = true;",
                    "    } else if(operation.getResultSet().title && operation.getResultSet().message) {",
                    "        title = operation.getResultSet().title;",
                    "        msg = operation.getResultSet().message;",
                    "",
                    "    } else {",
                    "        anyErr = true;",
                    "    }",
                    "} else {",
                    "    anyErr = true;",
                    "}",
                    "",
                    "if (anyErr) {",
                    "    Ext.Msg.alert({",
                    "        title: title,",
                    "        msg: msg,",
                    "        icon: Ext.Msg.ERROR,",
                    "        buttons: Ext.Msg.OK",
                    "    });",
                    "} else Ext.toast(title, msg);"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "saveCallback",
            "designerId": "612ab86d-a2c1-4542-a095-58677d7afb42"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "format"
                ],
                "fn": "setDateFormat",
                "implHandler": [
                    "// var displayFormat, inputFormat;",
                    "",
                    "// switch (format) {",
                    "//     case 'EN':",
                    "//     case 'dd-mm-yyyy':",
                    "//         displayFormat = \"d-M-Y\";",
                    "//         inputFormat = \"d/m/Y|d/m/y|j/n/Y|j/n/y|j/m/y|d/n/y|j/m/Y|d/n/Y|d-m-Y|d-m-y|j-n-Y|j-n-y|j-m-y|d-n-y|j-m-Y|d-n-Y|d/m|j/n|j/m|d/n|d-m|j-n|j-m|d-n|dm|dmy|dmY|d|j|Y-m-d\";",
                    "//         break;",
                    "//     case 'FR':",
                    "//     case 'dd/mm/yyyy':",
                    "//         displayFormat = \"d/m/Y\";",
                    "//         inputFormat = \"d/m/Y|d/m/y|j/n/Y|j/n/y|j/m/y|d/n/y|j/m/Y|d/n/Y|d-m-Y|d-m-y|j-n-Y|j-n-y|j-m-y|d-n-y|j-m-Y|d-n-Y|d/m|j/n|j/m|d/n|d-m|j-n|j-m|d-n|dm|dmy|dmY|d|j|Y-m-d\";",
                    "//         break;",
                    "//     case 'dd-mm-yyyy':",
                    "//         displayFormat = \"d-m-Y\";",
                    "//         inputFormat = \"d/m/Y|d/m/y|j/n/Y|j/n/y|j/m/y|d/n/y|j/m/Y|d/n/Y|d-m-Y|d-m-y|j-n-Y|j-n-y|j-m-y|d-n-y|j-m-Y|d-n-Y|d/m|j/n|j/m|d/n|d-m|j-n|j-m|d-n|dm|dmy|dmY|d|j|Y-m-d\";",
                    "//         break;",
                    "//     case 'US':",
                    "//     case 'mm/dd/yyyy':",
                    "//         displayFormat = \"m/d/Y\";",
                    "//         inputFormat = \"m/d/Y|m/d/y|n/j/Y|n/j/y|m/j/y|n/d/y|m/j/Y|n/d/Y|m-d-Y|m-d-y|n-j-Y|n-j-y|m-j-y|n-d-y|m-j-Y|n-d-Y|m/d|n/j|m/j|n/d|m-d|n-j|m-j|n-d|md|mdy|mdY|d|j|Y-m-d\";",
                    "//         break;",
                    "//     case 'mm-dd-yyyy':",
                    "//         displayFormat = \"m-d-Y\";",
                    "//         inputFormat = \"m/d/Y|m/d/y|n/j/Y|n/j/y|m/j/y|n/d/y|m/j/Y|n/d/Y|m-d-Y|m-d-y|n-j-Y|n-j-y|m-j-y|n-d-y|m-j-Y|n-d-Y|m/d|n/j|m/j|n/d|m-d|n-j|m-j|n-d|md|mdy|mdY|d|j|Y-m-d\";",
                    "//         break;",
                    "//     case 'yyyy/mm/dd':",
                    "//         displayFormat = \"Y/m/d\";",
                    "//         inputFormat = \"Y/m/d|y/m/d|Y/n/j|y/n/j|y/m/j|y/n/d|Y/m/j|Y/n/d|Y-m-d|y-m-d|Y-n-j|y-n-j|y-m-j|y-n-d|Y-m-j|Y-n-d|m/d|n/j|m/j|n/d|m-d|n-j|m-j|n-d|md|ymd|Ymd|d|j|Y-m-d\";",
                    "//         break;",
                    "//     case 'JP':",
                    "//     case 'yyyy-mm-dd':",
                    "//         displayFormat = \"Y-m-d\";",
                    "//         inputFormat = \"Y/m/d|y/m/d|Y/n/j|y/n/j|y/m/j|y/n/d|Y/m/j|Y/n/d|Y-m-d|y-m-d|Y-n-j|y-n-j|y-m-j|y-n-d|Y-m-j|Y-n-d|m/d|n/j|m/j|n/d|m-d|n-j|m-j|n-d|md|ymd|Ymd|d|j\";",
                    "//         break;",
                    "//     default:",
                    "//         displayFormat = \"d/m/Y\";",
                    "//         inputFormat = \"d/m/Y|d/m/y|j/n/Y|j/n/y|j/m/y|d/n/y|j/m/Y|d/n/Y|d-m-Y|d-m-y|j-n-Y|j-n-y|j-m-y|d-n-y|j-m-Y|d-n-Y|d/m|j/n|j/m|d/n|d-m|j-n|j-m|d-n|dm|dmy|dmY|d|j|Y-m-d\";",
                    "//         break;",
                    "// }",
                    "",
                    "// if (Ext.Date) {",
                    "//     Ext.apply(Ext.Date, {",
                    "//         defaultFormat: displayFormat",
                    "//     });",
                    "// }",
                    "",
                    "// if (Ext.util && Ext.util.Format) {",
                    "//     Ext.apply(Ext.util.Format, {",
                    "//         dateFormat: displayFormat",
                    "//     });",
                    "// }",
                    "",
                    "// Ext.define(\"tavico.dateformat.picker.Date\", {",
                    "//     override: \"Ext.picker.Date\",",
                    "//     format: displayFormat",
                    "// });",
                    "",
                    "// Ext.define(\"tavico.dateformat.form.field.Date\", {",
                    "//     override: \"Ext.form.field.Date\",",
                    "//     format: displayFormat,",
                    "//     altFormats: inputFormat",
                    "// });",
                    "",
                    "// Ext.define(\"tavico.dateformat.grid.PropertyColumnModel\", {",
                    "//     override: \"Ext.grid.PropertyColumnModel\",",
                    "//     dateFormat: displayFormat",
                    "// });",
                    "",
                    "// Ext.define(\"tavico.dateformat.grid.column.Date\", {",
                    "//     override: \"Ext.grid.column.Date\",",
                    "//     format: displayFormat",
                    "// });",
                    "",
                    "Ext.define(\"tavico.dateformat.data.field.Date\", {",
                    "    override: \"Ext.data.field.Date\",",
                    "    //dateReadFormat: 'Y-m-dTH:i:s',",
                    "    dateWriteFormat: 'Y-m-d H:i:s'",
                    "});",
                    "",
                    "// Ext.define(\"tavico.dateformat.view.form.field.DateTimeField\", {",
                    "//     override: \"tavico.view.form.field.DateTimeField\",",
                    "//     format: displayFormat + ' H:i',",
                    "//     altFormats: inputFormat + ' H:i:s|c'",
                    "// });"
                ]
            },
            "configAlternates": {
                "fn": "string",
                "implHandler": "code",
                "designer|params": "typedarray"
            },
            "name": "setDateFormat",
            "designerId": "53b45b76-56be-4cd8-a316-9fd56157ed88"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "win",
                    "type"
                ],
                "fn": "loadDashboard",
                "implHandler": [
                    "",
                    "var me\t= this,",
                    "    authConfig\t= me.authConfig,",
                    "    old = win.down('dashboard'),",
                    "    workspace, columnWidths, i, j, k, rec, page;",
                    "",
                    "if (!old) {",
                    "    if (!me._cpdData) {",
                    "        FrmCpDefinition.get({}, function(res) {",
                    "            if (res && res.success && !Ext.isEmpty(res.data))  {",
                    "                me._cpdData = res.data[0];",
                    "                loadMethod();",
                    "            }",
                    "        });",
                    "    } else {",
                    "        loadMethod();",
                    "    }",
                    "} else {",
                    "    var wsArgs = Ext.clone(win._wsArgs),",
                    "        ps\t= {};",
                    "    Ext.Array.each(wsArgs, function(arg) {",
                    "        if (arg.type == 'N') {",
                    "            if (authConfig.defaultValue.contract)",
                    "                arg.defaultvalue = arg.defaultvalue.replace('{contract}', authConfig.defaultValue.contract);// authConfig.defaultValue[arg.defaultvalue];",
                    "            if (authConfig.defaultValue.project)",
                    "                arg.defaultvalue = arg.defaultvalue.replace('{project}', authConfig.defaultValue.project);// authConfig.defaultValue[arg.defaultvalue];",
                    "            if (authConfig.defaultValue.packagecode)",
                    "                arg.defaultvalue = arg.defaultvalue.replace('{package}', authConfig.defaultValue.packagecode);// authConfig.defaultValue[arg.defaultvalue];",
                    "            ps[arg.name] = arg.defaultvalue;",
                    "        }",
                    "    });",
                    "    me.reloadPage(old, ps);",
                    "}",
                    "",
                    "function loadMethod() {",
                    "    if (type == 'P') workspace = me._cpdData.projectdashboard;",
                    "    else if (type == 'C') workspace = me._cpdData.contractdashboard;",
                    "    else workspace = me._cpdData.packagedashboard;",
                    "",
                    "    FrmFdWorkSpace.getHomePage({",
                    "        workspace: workspace",
                    "    }, function(homRes) {",
                    "        if (homRes && homRes.success && !Ext.isEmpty(homRes.data)) {",
                    "            var d = homRes.data[0],",
                    "                wsArgs = Ext.clone(d.args),",
                    "                wsConfig\t= d.layout;",
                    "",
                    "            win._wsArgs = Ext.clone(wsArgs);",
                    "            Ext.Array.each(wsArgs, function(arg) {",
                    "                if (arg.type == 'N') {",
                    "                    if (authConfig.defaultValue.contract)",
                    "                        arg.defaultvalue = arg.defaultvalue.replace('{contract}', authConfig.defaultValue.contract);// authConfig.defaultValue[arg.defaultvalue];",
                    "                    if (authConfig.defaultValue.project)",
                    "                        arg.defaultvalue = arg.defaultvalue.replace('{project}', authConfig.defaultValue.project);// authConfig.defaultValue[arg.defaultvalue];",
                    "                    if (authConfig.defaultValue.packagecode)",
                    "                        arg.defaultvalue = arg.defaultvalue.replace('{package}', authConfig.defaultValue.packagecode);// authConfig.defaultValue[arg.defaultvalue];",
                    "                }",
                    "            });",
                    "",
                    "            if (Ext.isString(wsConfig) && wsConfig) {",
                    "                wsConfig = Ext.JSON.decode(wsConfig);",
                    "            }",
                    "",
                    "            if (!wsConfig) {",
                    "                wsConfig = [];",
                    "                var height = 600;",
                    "                if (d.widgets.length == 1) height = win.getHeight() - 15;",
                    "                for (i = 0; i < d.widgets.length; i++) {",
                    "                    var w = d.widgets[i],",
                    "                        wgCode\t\t= w.widget,",
                    "                        wgItemId\t= wgCode.replace(/\\./, '_');",
                    "",
                    "",
                    "                    for (j = 0; j < w.args.length; j++) {",
                    "                        for (k = 0; k < wsArgs.length; k++) {",
                    "                            if (w.args[j].name == wsArgs[k].name) {",
                    "                                w.args[j].defaultvalue = wsArgs[k].defaultvalue;",
                    "                                break;",
                    "                            }",
                    "                        }",
                    "                    }",
                    "                    Ext.Array.push(wsConfig, {",
                    "                        type: 'widget',",
                    "                        widget: w,",
                    "                        args: wsArgs,",
                    "                        _wgCode: wgCode,",
                    "                        columnIndex: 0,",
                    "                        height: height,",
                    "                        closable: false,",
                    "                        frame: false",
                    "                    });",
                    "                }",
                    "",
                    "            } else {",
                    "                if (wsConfig.columnWidths) columnWidths = wsConfig.columnWidths;",
                    "                if (wsConfig.items) wsConfig = wsConfig.items;",
                    "",
                    "                for (i = 0; i < wsConfig.length; i++) {",
                    "                    var it = wsConfig[i];",
                    "                    it._wgCode = it.itemId;",
                    "                    delete it.itemId;",
                    "                    it.closable = false;",
                    "                    it.frame = false;",
                    "                    it.type = 'widget';",
                    "                    if (it.xtype != 'container') {",
                    "                        if (wsConfig.length == 1) it.height = win.getHeight() - 15;",
                    "                        rec = findWidget(d.widgets, it._wgCode);",
                    "                        if (rec) {",
                    "                            it.widget = rec;",
                    "                            it.args = wsArgs;",
                    "",
                    "                        }",
                    "",
                    "                        //it = me.fixWidget2ExtJs5(it);",
                    "                    }",
                    "                }",
                    "            }",
                    "",
                    "            page = win.add({",
                    "                xtype:\t'dashboard',",
                    "                parts: {",
                    "                    widget: 'tvcportal'",
                    "                },",
                    "                stateful: false,",
                    "                _wsCode: d.workspace,",
                    "                columnWidths: columnWidths,",
                    "                maxColumns: wsConfig.length,",
                    "                defaultContent:\twsConfig",
                    "            });",
                    "",
                    "            if (page) page.args = wsArgs;",
                    "",
                    "        }",
                    "    });",
                    "}",
                    "function findWidget(widgets, code) {",
                    "    var res = null;",
                    "    Ext.Array.each(widgets, function(w) {",
                    "        if (w.widget == code) {",
                    "            res = w;",
                    "            return false;",
                    "        }",
                    "    });",
                    "    return res;",
                    "}",
                    ""
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "loadDashboard",
            "designerId": "dc0d5b41-12bc-41ab-8353-8e39aae01cef"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "panel",
                    "args",
                    "cb"
                ],
                "fn": "showHomeWindow",
                "implHandler": [
                    "var me = this,",
                    "    win = me.getWdHome(),",
                    "    dbXType\t= 'container',",
                    "    widgetXtype\t= 'tvcwidget',",
                    "    wp = -1,",
                    "    cWin, wpItemId;",
                    "",
                    "if (args) {",
                    "    if (args.id) {",
                    "        wp = args.id;",
                    "    } else if (args.ID) {",
                    "        wp = args.ID;",
                    "    } else if (args.workspace) {",
                    "        wp = args.workspace;",
                    "    }",
                    "",
                    "}",
                    "",
                    "if (wp != -1) {",
                    "    wpItemId = wp.replace(/\\./, '_');",
                    "}",
                    "",
                    "if (!win) {",
                    "    var tmpCfg= {};",
                    "    if (args.controlbox) {",
                    "        if (args.controlbox == '2' || args.controlbox == '3') {",
                    "            tmpCfg = {header: false};",
                    "        }",
                    "    }",
                    "    if (args.modal == '1') {",
                    "        tmpCfg.modal = true;",
                    "    }",
                    "    win = me.getWdHomeView().create(tmpCfg);",
                    "    if (args.controlbox) {",
                    "        if (args.controlbox == '1' || args.controlbox == '3') {",
                    "            win.down('toolbar').hide();",
                    "        }",
                    "    }",
                    "} else {",
                    "    cWin = win.child('container[itemId]');",
                    "    if (cWin.itemId == wpItemId || wp === -1) {",
                    "        me.reloadPage(cWin, args);",
                    "        return;",
                    "    } else {",
                    "        me.stopTimer(cWin);",
                    "        win.remove(cWin);",
                    "    }",
                    "}",
                    "",
                    "panel.on('destroy' , function() {",
                    "    if (win && !win.isDestroyed) win.destroy();",
                    "});",
                    "",
                    "if (args.window) {",
                    "    var arr = JSON.parse(args.window),",
                    "        w,h;",
                    "",
                    "    if (Ext.isArray(arr)) {",
                    "        w = arr[0];",
                    "        h = arr[1];",
                    "        win.setHeight(h);",
                    "        win.setWidth(w);",
                    "    }",
                    "",
                    "}",
                    "",
                    "if (win.height > window.innerHeight || win.width > window.innerWidth) {",
                    "    if (win.height > window.innerHeight - 10)",
                    "        win.setHeight(window.innerHeight - 10);",
                    "    if (win.width > window.innerWidth - 10)",
                    "        win.setWidth(window.innerWidth - 10);",
                    "}",
                    "",
                    "win.show();",
                    "win.mask(LanguageControl.translate('Loading...'));",
                    "if (Ext.isFunction(cb)) {",
                    "    win.on('destroy', function(w) {",
                    "        cb.call(this, page);",
                    "    });",
                    "}",
                    "",
                    "FrmFdWorkSpace.getHomePage({",
                    "    workspace: wp",
                    "}, function(res) {",
                    "    var d = res.data[0],",
                    "        wsArgs = Ext.clone(d.args),",
                    "        wsConfig\t= d.layout;",
                    "",
                    "    if (res) {",
                    "        success = res.success;",
                    "        records = res.data;",
                    "    }",
                    "",
                    "    if (success) {",
                    "        if (!d) return;",
                    "",
                    "        var newRecord\t= d,",
                    "            regions\t\t= ['center','west','east','north','south','south'],",
                    "            configRect\t= me.authConfig,",
                    "            columnWidths;",
                    "",
                    "//         if (wp == -1 && configRect.homepage === '') configRect.set('homepage', newRecord.get('workspace'));",
                    "        Ext.Array.each(newRecord.args, function(arg) {",
                    "            if (arg.type == 'N' && configRect.defaultValue[arg.defaultvalue] !== undefined) arg.defaultvalue = configRect.defaultValue[arg.defaultvalue];",
                    "            Ext.Array.push(wsArgs, arg);",
                    "        });",
                    "",
                    "        if (wsArgs.length > 0) {",
                    "            Ext.Array.each(wsArgs, function(arg) {",
                    "                if (args && args[arg.name]) arg.defaultvalue = args[arg.name];",
                    "            });",
                    "        }",
                    "",
                    "        if (Ext.isString(wsConfig) && wsConfig) {",
                    "            wsConfig = Ext.JSON.decode(wsConfig);",
                    "        }",
                    "",
                    "        if (!wsConfig) {",
                    "            wsConfig = [];",
                    "            var height = 600;",
                    "            if (newRecord.widgets.length == 1) height = (win.body ? win.body.getHeight() : win.getHeight()) - 10;",
                    "            Ext.Array.each(newRecord.widgets, function(w) {",
                    "                var inxRegion = newRecord.widgets.indexOf(w),",
                    "                    wgCode\t\t= w.widget,",
                    "                    wgItemId\t= wgCode.replace(/\\./, '_');",
                    "",
                    "                if (inxRegion >= regions.length)",
                    "                    inxRegion = regions.length - 1;",
                    "",
                    "//                 Ext.Array.each(w.args, function (a) {",
                    "//                     Ext.Array.each(wsArgs, function(aP) {",
                    "//                         if (a.name == aP.name) {",
                    "//                             a.defaultvalue = aP.defaultvalue;",
                    "//                             return false;",
                    "//                         }",
                    "//                     });",
                    "//                 });",
                    "                for (var j = 0; j < w.args.length; j++) {",
                    "                    for (var k = 0; k < wsArgs.length; k++) {",
                    "                        if (w.args[j].name == wsArgs[k].name) {",
                    "                            w.args[j].defaultvalue = wsArgs[k].defaultvalue;",
                    "                            break;",
                    "                        }",
                    "                    }",
                    "                }",
                    "                Ext.Array.push(wsConfig, {",
                    "                    type: 'widget',",
                    "                    widget: w,",
                    "                    args: wsArgs,",
                    "                    _wgCode: wgCode,",
                    "                    columnIndex: 0,",
                    "                    height: height,",
                    "                    closable: false,",
                    "                    frame: false",
                    "                });",
                    "            });",
                    "",
                    "        } else {",
                    "            if (wsConfig.columnWidths) columnWidths = wsConfig.columnWidths;",
                    "            if (wsConfig.items) wsConfig = wsConfig.items;",
                    "",
                    "            for (var i = 0; i < wsConfig.length; i++) {",
                    "                var it = wsConfig[i];",
                    "                it._wgCode = it.itemId;",
                    "                delete it.itemId;",
                    "                it.closable = false;",
                    "                it.frame = false;",
                    "                it.type = 'widget';",
                    "",
                    "                if (it.xtype != 'container') {",
                    "                    if (wsConfig.length == 1) it.height = (win.body ? win.body.getHeight() : win.getHeight()) - 10;",
                    "                    var rec = null;",
                    "                    Ext.Array.each(newRecord.widgets, function(w) {",
                    "                        if (w.widget == it.itemId) {",
                    "                            rec = w;",
                    "                            return false;",
                    "                        }",
                    "                    });",
                    "",
                    "                    if (rec) {",
                    "                        it.widget = rec;",
                    "                        it.args = wsArgs;",
                    "                    }",
                    "",
                    "//                     it = me.fixWidget2ExtJs5(it);",
                    "                } else {",
                    "                    var containerItems = it.items;",
                    "                    Ext.Array.removeAt(wsConfig, i);",
                    "                    Ext.Array.each(containerItems, function(itC) {",
                    "                        var rec = null;",
                    "                        Ext.Array.each(newRecord.widgets, function(w) {",
                    "                            if (w.widget == it.itemId) {",
                    "                                rec = w;",
                    "                                return false;",
                    "                            }",
                    "                        });",
                    "",
                    "                        //                         var rec = newRecord.widget().findRecord('widget', itC.itemId);",
                    "                        if (rec) {",
                    "                            itC.widget = rec;",
                    "                            itC.args = wsArgs;",
                    "                        }",
                    "                        itC = me.fixWidget2ExtJs5(itC);",
                    "                        Ext.Array.insert(wsConfig, i, itC);",
                    "                    });",
                    "                    i += containerItems.length - 1;",
                    "                }",
                    "            }",
                    "        }",
                    "        wp = newRecord.workspace;",
                    "        wpItemId = wp.replace(/\\./, '_');",
                    "",
                    "        page = win.add({",
                    "            xtype:\t'dashboard',",
                    "            parts: {",
                    "                widget: 'tvcportal'",
                    "            },",
                    "            stateful: false,",
                    "            columnWidths: columnWidths,",
                    "            maxColumns: wsConfig.length,",
                    "            defaultContent:\twsConfig",
                    "        });",
                    "",
                    "        if (page) page.args = wsArgs;",
                    "",
                    "    } else {",
                    "",
                    "    }",
                    "});"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "showHomeWindow",
            "designerId": "90322b32-c045-4faf-8cb7-58fedfadb4df"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "queryString",
                    "recursive"
                ],
                "fn": "fromQueryString",
                "implHandler": [
                    "var parts = queryString.replace(/^\\?/, '').split('&'),",
                    "    object = {},",
                    "    temp, components, name, value, i, ln, part, j, subLn, matchedKeys, matchedName, keys, key, nextKey;",
                    "",
                    "for (i = 0 , ln = parts.length; i < ln; i++) {",
                    "    part = parts[i];",
                    "    if (part.length > 0) {",
                    "        components = part.split('=');",
                    "        name = decodeURIComponent(components[0]);",
                    "        value = (components[1] !== undefined) ? decodeURIComponent(components[1]) : '';",
                    "        if (!recursive) {",
                    "            if (object.hasOwnProperty(name)) {",
                    "                if (!Ext.isArray(object[name])) {",
                    "                    object[name] = [",
                    "                        object[name]",
                    "                    ];",
                    "                }",
                    "                object[name].push(value);",
                    "            } else {",
                    "                object[name] = value;",
                    "            }",
                    "        } else {",
                    "            matchedKeys = name.match(/(\\[):?([^\\]]*)\\]/g);",
                    "            matchedName = name.match(/^([^\\[]+)/);",
                    "            if (!matchedName) {",
                    "                throw new Error('[Ext.Object.fromQueryString] Malformed query string given, failed parsing name from \"' + part + '\"');",
                    "            }",
                    "            name = matchedName[0];",
                    "            keys = [];",
                    "            if (matchedKeys === null) {",
                    "                object[name] = value;",
                    "",
                    "                continue;",
                    "            }",
                    "            for (j = 0 , subLn = matchedKeys.length; j < subLn; j++) {",
                    "                key = matchedKeys[j];",
                    "                key = (key.length === 2) ? '' : key.substring(1, key.length - 1);",
                    "                keys.push(key);",
                    "            }",
                    "            keys.unshift(name);",
                    "            temp = object;",
                    "            for (j = 0 , subLn = keys.length; j < subLn; j++) {",
                    "                key = keys[j];",
                    "                if (j === subLn - 1) {",
                    "                    if (Ext.isArray(temp) && key === '') {",
                    "                        temp.push(value);",
                    "                    } else {",
                    "                        temp[key] = value;",
                    "                    }",
                    "                } else {",
                    "                    if (temp[key] === undefined || typeof temp[key] === 'string') {",
                    "                        nextKey = keys[j + 1];",
                    "                        temp[key] = (Ext.isNumeric(nextKey) || nextKey === '') ? [] : {};",
                    "                    }",
                    "                    temp = temp[key];",
                    "                }",
                    "            }",
                    "        }",
                    "    }",
                    "}",
                    "return object;"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "fromQueryString",
            "designerId": "27f5c8c8-329f-4f41-a5a8-a43516e2d93e"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "page",
                    "args",
                    "reload"
                ],
                "fn": "reloadPage",
                "implHandler": [
                    "var me\t\t\t= this,",
                    "    isRefresh\t= false,",
                    "    forceReload, tvcwidgets;",
                    "",
                    "if (args && args.refresh == '1') reload = true;",
                    "forceReload = (reload === true);",
                    "",
                    "if (page.args && args) {",
                    "    Ext.Array.each(page.args, function(arg) {",
                    "        if(args[arg.name] !== undefined && args[arg.name] !== null) {",
                    "            arg.defaultvalue = args[arg.name];",
                    "            if(!isRefresh) isRefresh = true;",
                    "        }",
                    "    });",
                    "}",
                    "",
                    "if(isRefresh === false && forceReload === false) {",
                    "//     me.startTimer(page);",
                    "",
                    "    return;",
                    "}",
                    "",
                    "if (page.isDestroyed) page = me.getPlCardHome().getLayout().getActiveItem();",
                    "if (!page.isDestroyed) {tvcwidgets = page.query('tvcportal[widget]');}",
                    "",
                    "if (!tvcwidgets) return;",
                    "",
                    "if (tvcwidgets.length == 1) {",
                    "    if (tvcwidgets[0].getHeight() < 100) {",
                    "        var h = 0;",
                    "        if (page.up('#plCard')) h = page.up('#plCard').getHeight();",
                    "        else h = page.up().getHeight();",
                    "        tvcwidgets[0].setHeight(h - 10);",
                    "    }",
                    "}",
                    "Ext.Array.each(tvcwidgets, function(wg) {",
                    "    if (wg.widget) {",
                    "        isRefresh = false;",
                    "",
                    "        if(args){",
                    "            Ext.Array.each(wg.widget.args, function(arg) {",
                    "                if(args[arg.name] !== undefined && args[arg.name] !== null) {",
                    "                    arg.defaultvalue = args[arg.name];",
                    "                    if(!isRefresh) isRefresh = true;",
                    "                }",
                    "            });",
                    "        }",
                    "",
                    "        if(isRefresh || forceReload) {",
                    "            wg.getController().reloadWidget(wg);",
                    "        }",
                    "",
                    "        if (wg.runner) wg.runner.start(wg.task);",
                    "    }",
                    "});"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "reloadPage",
            "designerId": "1126fca4-8709-4836-9ba9-ed9211bd9410"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "formid",
                    "callback"
                ],
                "fn": "hasSeq",
                "implHandler": [
                    "if (!formid) {",
                    "    if (Ext.isFunction(callback)) callback.call(this, false);",
                    "    return false;",
                    "}",
                    "var me = this;",
                    "if (!me.FormSeq) me.FormSeq = {};",
                    "if (me.FormSeq[formid] !== undefined) {",
                    "    if (Ext.isFunction(callback)) callback.call(this, me.FormSeq[formid]);",
                    "    return me.FormSeq[formid];",
                    "}",
                    "FrmCsSequence.hasSeq({ formid: formid }, function(response,e) {",
                    "    if (response && response.success && response.data !== undefined) {",
                    "        me.FormSeq[formid] = response.data;",
                    "        if (Ext.isFunction(callback)) callback.call(this, me.FormSeq[formid]);",
                    "    }",
                    "});"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "hasSeq",
            "designerId": "843e7406-76d1-48f2-b670-8d8849fffed4"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "project",
                    "cb"
                ],
                "fn": "loadProject",
                "implHandler": [
                    "var me = this,",
                    "    main\t= me.getMainContainer();",
                    "",
                    "FrmCpProject.get({project: project}, function(res) {",
                    "    if (res && res.success && !Ext.isEmpty(res.data)) {",
                    "        var d\t= res.data[0],",
                    "            record;",
                    "        d.id\t= d.project;",
                    "        record = Ext.create('tavico.model.CpProject', d);",
                    "        main.setCurProject(record);",
                    "        cb.call(me, record);",
                    "    } else cb.call(me);",
                    "});"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "loadProject",
            "designerId": "05d5cb1e-ec3d-498c-8810-b059b22bcf80"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "designer|params": [
                    "filename"
                ],
                "fn": "getExtension",
                "implHandler": [
                    "var t = (/[.]/.exec(filename)) ? /[^.]+$/.exec(filename) : undefined;",
                    "            if (Ext.isEmpty(t)) return null;",
                    "            return '.' + t[0];"
                ]
            },
            "configAlternates": {
                "designer|params": "typedarray",
                "fn": "string",
                "implHandler": "code"
            },
            "name": "getExtension",
            "designerId": "51877102-5964-4dae-9dde-0b678ad648c3"
        },
        {
            "type": "basicfunction",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "fn": "getNewId",
                "implHandler": [
                    "var a\t= new Ext.data.identifier.Uuid(),",
                    "    autonum = a.generate();",
                    "",
                    "return Ext.util.Format.date(new Date(), 'ymd-Hisu') + '-' + autonum.substring(0, 8).toUpperCase();"
                ]
            },
            "configAlternates": {
                "fn": "string",
                "implHandler": "code"
            },
            "name": "getNewId",
            "designerId": "d41d69e3-ebd1-45ee-9e64-c3779a9c1454"
        },
        {
            "type": "controllerref",
            "reference": {
                "name": "items",
                "type": "array"
            },
            "codeClass": null,
            "userConfig": {
                "ref": "wdHome",
                "selector": "wdhome"
            },
            "configAlternates": {
                "ref": "string",
                "selector": "string"
            },
            "name": "wdHome",
            "designerId": "66a4e097-58b3-4852-8adb-18885105f59f"
        }
    ]
}